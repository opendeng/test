THREE.CircleGeometry(radius, segments, thetaStart, thetaLength) （圆形）

THREE.CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegmen
ts, openEnded（圆柱）

THREE.TetrahedronGeometry(radius, detail) （4面体）
THREE.OctahedronGeometry(radius, detail) （正八面体）
THREE.IcosahedronGeometry(radius, detail) （正20面体）
THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) (圆环)
THREE.TorusKnotGeometry(radius, tube, radialSegments, tubularSegments, p, q, heightS
cale) （圆环结）

Lambert 材质（MeshLambertMaterial）是符合 Lambert 光照模型的材质。（不反射）
Phong材质（MeshPhongMaterial）是符合Phong 光照模型的材质。和 Lambert 不同的是，
Phong模型考虑了镜面反射的效果，因此对于金属、镜面的表现尤为适合。 （反射）specular（高光颜色） 值指定镜
面反射系数作说明（ shininess 高光值越大，光斑越小）
new THREE.MeshNormalMaterial() （法向材质）


color（镜面光）
color 是用来表现材质对散射光的反射能力，也是最常用来设置材质颜色的属性。除此之
外，还可以用 ambient 和 emissive 控制材质的颜色。 
ambient 表示对环境光的反射能力，只有当设置了 AmbientLight 后，该值才是有效的，
材质对环境光的反射能力与环境光强相乘后得到材质实际表现的颜色。 
emissive 是材质的自发光颜色，可以用来表现光源的颜色。单独使用红色的自发光： 



var texture = THREE.ImageUtils.loadTexture('../img/0.png',function(){}); （纹理）拥有一个回调函数
new THREE.MeshFaceMaterial(materials)); 网面材质；materisls为六个纹理的材质数组（六面）

texture.wrapS = texture.wrapT = THREE.RepeatWrapping; 
texture.repeat.set(4, 4); 材质两个方向4次重复



网格：

模型：
模型路径与回调函数
loader.load('../lib/port.obj', function(obj) { 
    mesh = obj; //储存到全局变量中 
    scene.add(obj); 

双面绘制；
});
loader.load('../lib/port.obj', function(obj) { 
    obj.traverse(function(child) { 
        if (child instanceof THREE.Mesh) { 
            child.material.side = THREE.DoubleSide; 
        } 
    }); 


代码中设置材质：
  if (child instanceof THREE.Mesh) { 
            child.material = new THREE.MeshLambertMaterial({ 
                color: 0xffff00, 
                side: THREE.DoubleSide 
            }); 
        }


导入带有材质的模型：
不再使用 OBJLoader.js ，而是使用 MTLLoader.js 与 OBJMTLLoader.js ，并且
要按改顺序引用： 
<script type="text/javascript" src="MTLLoader.js"></script> 
<script type="text/javascript" src="OBJMTLLoader.js"></script> 

调用：
var loader = new THREE.OBJMTLLoader(); 
loader.addEventListener('load', function(event) { 
    var obj = event.content; 
    mesh = obj; 
    scene.add(obj); 
}); 
loader.load('../lib/port.obj', '../lib/port.mtl'); 


THREE.AmbientLight(hex) //环境光（颜色）、、添加到场景

点光源：
THREE.PointLight(hex, intensity, distance) 颜色、亮度、最远距离


//平行光
THREE.DirectionalLight(hex, intensity) ，平面
亮度与平面的位置无关，而只与平面的法向量相关。只要平面是平行的，那么得到的光照
也一定是相同的。 
 
//THREE.SpotLight(hex, intensity, distance, angle, exponent)聚光灯
相比点光源，多了 angle 和 exponent 两个参数。 angle 是聚光灯的张角，缺省值是
Math.PI / 3 ，最大值是 Math.PI / 2 ； exponent 是光强在偏离 target 的衰减指数
（ target 需要在之后定义，缺省值为 (0, 0, 0) ），缺省值是 10 ；
除了设置 light.target.position 的方法外，如果想让聚光灯跟着某一物体移动（就像真
的聚光灯！），可以 target 指定为该物体： 
为CUbe指定物体
var cube = new THREE.Mesh(new THREE.CubeGeometry(1, 1, 1), 
                    new THREE.MeshLambertMaterial({color: 0x00ff00})); 
 
var light = new THREE.SpotLight(0xffff00, 1, 100, Math.PI / 6, 25); 
light.target = cube


阴影：
renderer.shadowMapEnabled = true; //告诉渲染器需要渲染阴影；；

xxx.castShadow = true; 
对于接收阴影的物体调用： 
xxx.receiveShadow = true; 
比如场景中一个平面上有一个正方体，想要让聚光灯照射在正方体上，产生的阴影投射在
平面上，那么就需要对聚光灯和正方体调用 castShadow = true ，对于平面调用
receiveShadow = true 。 
以上就是产生阴影效果的必要步骤了，不过通常还需要设置光源的阴影相关属性，才能正
确显示出阴影效果。 ；；


对于平行光，需要设置 shadowCameraNear 、 shadowCameraFar 、 shadowCameraLeft 、
shadowCameraRight 、 shadowCameraTop 以及 shadowCameraBottom 六个值，相当于正交投
影照相机的六个面。同样，只有在这六个面围成的长方体内的物体才会产生阴影效果。 
为了看到阴影照相机的位置，通常可以在调试时开启 light.shadowCameraVisible = 
true 

而如果想实现软阴影的效果，可以通过 renderer.shadowMapSoft = true; 方便地实现。 

， uv 是 Three.js 帮你传进来的一个很有用的属性，它代表了该顶点在UV 映射时的横
纵坐标。（2维）